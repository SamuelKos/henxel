# Changelog
* To version: 	0.2.0
* From version:	0.0.3


# 0.2.0
- It is now possible to close tab without saving it with: ctrl-q
- Added missing unbind for buttonrelease-1 when replacing.
- Added initial word-expander from idle/autoexpand.py, renamed it wordexpand.py,
	binded to Alt-e and updated help-text.
- Also removed overlap-index stuff from replace and use now 'replaced'-tag instead
	to mark already replaced areas.


# 0.1.9
- After save (give filename), put focus on text.
- Pasting to tab with no filename does no longer trigger syntax highlighting.
- Unindenting single line works now as it should.
- Updated help-text.
- Added initial checking for parenthesis mismatch.
- Fix error raised in v.0.1.8, when walking to newtab.
- When searching, ensure_visibility shows now 4 next lines instead of just 2.
- When deleting selection, an extra character before selection was also deleted. This is now fixed.


# 0.1.8
- Fix error-view syntax-highlighting.
- Fix error when doing ctrl-s if cursor not visible.
- Colorchooser now shows current color correctly.
- Updated help-file.
- Fixes for show_next, ensure_visibility, walk_tabs.
- Fixes for paste() when dealing with multiline string markers.


# 0.1.7
- Added bunch of files from idlelib to be used as example resource in the future.
	https://github.com/python/cpython/tree/3.11/Lib/idlelib/
- Small fixes.


# 0.1.6
- Quick fix for check_indent_depth()


# 0.1.5
- From CHANGELOG.md to CHANGELOG.
- Add version number to help.
- Fix syntax-highlight like: calls
- Small fixes.
- You can now change indentation depth with: .change_indentation_width()
- Indentation depth is saved in configuration.
- Indentation depth is now checked before opening files.


# 0.1.4
- Updating whole-files syntax is now much faster like when walking tabs etc. It is done by calling update_tokens directly, without waiting for sync-event. Sync-event is still used to detect changes and syntax-highlighting is now much ahead last version.
- Only replace_all leaves tags on now, after searching.


# 0.1.3
- Unified tokenfuncs.
- Added syntax-option to conf.
- Tab is syntax-highlighted when it has/gets py-filename.
- Added shortcut for run-file: Ctrl-Super-Return. Super means search-key.
- Alt-x toggles syntax.
- Fixed syntax-highlighting to handle multiline strings etc.
- Replace all is now much faster and so is show_next and prev.
- Error-view has also syntax.
- Because Alt-n after replacing is bad, dont want to open new tab, but also
want Alt-n-Return, so now: ctrl-n is show_next and ctrl-p show_prev when searching.


# 0.1.2
- Add initial syntax highlight for python-files.
- Fixed tabify to correctly strip all tabs on disk save.
- Add tabify region-utility to popup-menu.
- Search now leaves tags on. Double-Esc clears.
- It is now possible to go back to last cursor position with arrow left
when doing seach_next if have gone too far.
- changefont.py now takes optional tracefunc as kw-argument to perform whatever action is needed
on font changes.
- changes on shortcuts:
- ctrl-p --> alt-f,  ctrl-s --> alt-s,  ctrl-n --> alt-n
- ctrl-o  insert linebreak
- ctrl-i  move right
- ctrl-b  move left
- ctrl-e  move to line end
- ctrl-s  move to line end
- ctrl-k  remove from cursor to lineend


# 0.1.1
- Quick fix for: wrong bind in font_choose
- And for: __new__ should not alter existing object types


# 0.1.0
- Files can again be opened from entry.
- Improvements for fdialog.Fdialog like show current directory.
- File loading is no more blocking but more like fontchoose, using tracevar.
- If current git-branch is main or master it is shown with red color.
- No more multiple fontchoose-, colorchoose- or filedialogs or editors.
- Binding for fontchoose: ctrl-p moved from self to contents reason being
the same as usual, it has default binding in Text()-widget which moves
cursor line up. Which is actually pretty good choice, also that ctrl-n for down.
But I need those and I can scroll.
- Widgets are now disabled when filedialog is open.
- changefont.FontChooser no longer initiates its toplevel-window, and font names are taken from font-instances name-attribute rather than using dummy-names.
- etc. small fixes


# 0.0.9
- Fix for: being able modify contents at the beginning of search.
- Cursor pos is again set after editor launch
- Clarified some varnames: like tag 'found' to 'focus'
- Dumped tkinter.filedialog.FileDialog. Instead use now fdialog.FDialog
- Tested setting cursor blink off when idle but it added too much overhead, so left as is.
	(Had to bind to: Button, KeyRelease, FocusIn and it seemed to be too much.)


# 0.0.8
- Reorder grid-related stuff in init to make instantiation of editor feel more instant.
- You can now toggle linenumbers with Alt-l (as lemon). This adds a new option to conf meaning this version is not compatible with earlier ones.
- Adjusted colors and borders for filedialog.Filedialog used in load().
- Made small fix to no_copy_ln(). If encounter problem with copying from editor to shell or console, try
first to copy something from shell or console to editor and retry. I have not had this issue for some time now.
- Added inspect-option to popup-menu, and updated help-file for how to use it.


# 0.0.7
- Fix for: goodfonts were left commented and removed badfonts as unused.
- Removed tkinter.scrolledtext -module as unused.
- Added info how to inspect objects in help. Was thinking implementing, but I changed my mind.
- Added a section about venvs for more advanced programmers in README.


# 0.0.6
- Trailing whitespace of non-empty lines is now stripped away in tabify() when saving files to disk.
- Control-f is now binded to Text-widget instead of Toplevel. Reason is again to avoid default binding.
	It seems to center to cursor by default.
- After doing long paste, more lines than in screen, cursor was out of screen. Now view is refreshed after
	paste.
- When doing search or replace, clipboard contents is now autofilled to entry in most situations. Yes, I got
	idea from Gnome editor, which by the way has some issue showing the last lines sometimes, this is bad,
	I have always showed the lines, keeping them untouched is another story.
- Finally got rid of module random. Fonts are now initiated with family='TkDefaulFont'.
- Some renaming etc. in linenumbers.
- Linenumber update is now handled by built-in event: <<'WidgetViewSync'>>  which is great news:
	got rid of quite complex self-handled event-loop. It was working alright but this approach is simpler
	and more responsive. Im keeping copy of version 0.0.5 in dev/oldversions so it can be used as a reference. Install it with pip install oldversion.tar.gz.
	About event <<'WidgetViewSync'>> :
	It is generated when doing: insert, delete or screen geometry change. Also on almost all font-changes but
	not when scrolling, so this is the reason why update_linenums is called also from sbset_override.
	This really made a difference. It is now child-play to do things like toggle-linenums etc.
- Started replacing usage of % in strings with f-strings. Now all calls to print() are %-free. Still ~150 replacements left.


# 0.0.5
- Small fix in getLineNumbers()
- Added borders etc.
- You can now walk back with: alt-q
- File open -dialog width is increased
- Close open dialogs when quitting, tk_chooseColor is problematic though
	(it might have own temporary root)
- Dumped 'proxy-undo',  reason being lag-increase, files are in /dev if interested
- If get motivation to continue with undo, I will go with ungrid, also in /dev


# 0.0.4
- Made decision not to try to do tab-specific undo, for reasons you can read in dev/todo.py
- Undo should no longer clear contents.
- Pasting from editor to console works again.
- Changed title of file selection dialog --> select file
- Changed title of editor: 3/5 --> 00@00
- Added dev-dir to repo and some may be useful -files there
- Updated mkvenv in readme
