# ^/\|-_+:,.;'"*%?=!@&()[]{}~<>
###############################

Below this: done ################################################


move_many_lines back to old no jump, done
using tcl


kill line from insert to line-end, ctrl-k
default text-class bind, just update help, done


count token percentages /dev/token_stats.py, done


check if want_ln in update_line, sbset_override , done


check_sel
change sel.start end etc also
--> enable sel editing at both ends, done


popup
inspect -->  open mod, done


goto def:
fixed no can bookmark when goto_def, done
flash with flash_line(), done
works with self.myfuncdef, with cursor at wordend,
and with alt-g from search match
see help(e.goto_def)
( cursor is at or in between:
self.<INS>walk_scop<INS>e )
-->
( cursor is at or in between:
self.w<INS>alk_scope<INS> )
update help, done


conf is now saved in sys.prefix without checks, done
--> enable saving conf when not in venv
update help, readme done

renamed:
apply_config --> config_tabs, done


(Shift)-Home/End --> goto/selectto linestart/end, done


walk_scope absolutely next bind no work linux windows, done
	parenleft right


changed binds between rising and diving walk_scope, done
help done
reason: normally there is no deep nesting.
--> 'easier' bind first


editor remember geometry in conf, done
self.use_geometry()
update help, done


when closing tab ctrl-d check if bookmarks, done
--> ask confirmation with messabox
--> prevent mistakenly closing tabs and loosing bookmarks
used in: del_tab, open_file
ctrl-shift-Q --> no ask


tab_has_syntax_error(), done
checks all open py-files with ast
is setting
off by default, to set:
check_syntax_on_exit(setting=0,1)
without arguments returns current setting
used also when debug, removed package_has_syntax_error(), done
update help, done


# enable getting branch when not using git, done
self.set_version_control_cmd(command as list)
is setting
info about shlex
cmd_as_string='someprg -somearg1 3 --somearg2 moreargs'
mcmd_as_list=shlex.split(my_cmd_as_string)
update help, done


#######################################
fixed move_many_lines(), done
is faster, uses same stuff as in center_view
If still is slow, use (Shift)-PgUp/PgDown
--> as fast as can get incremental moving/selecting

Below, compensation for (possibly) missing PgUp/Down -keys,
Control-1/2 (selecting), Control-3/4 just moving

Copying Tcl func from one bind to other, example:
( Next means PgDown, Prior means PgUp )

proc = w.bind_class('Text', '<Key-Next>').strip()
w.bind('<Control-Key-4>', proc)
proc = w.bind_class('Text', '<Key-Prior>').strip()
w.bind('<Control-Key-3>', proc)
proc = w.bind_class('Text', '<Shift-Key-Next>').strip()
w.bind('<Control-Key-2>', proc)
proc = w.bind_class('Text', '<Shift-Key-Prior>').strip()
w.bind('<Control-Key-1>', proc)


help done
#######################################
walk_scope fixed, uses defline tag, done
get_absolutely_next_defline()
get_deflines()
self.deflines list
# is update of self.deflines needed:
self.cur_defline = '-1.-1'
#######################################




Below this: not done:
###############################################


paste inside multiline string no work
check paste token update


check use of 'defline'-tag, self.deflines in
 search_next etc


###
indent, unindent, etc check line_can_update
currently found one error:
 uncomment had self.line_can_update = False
 fixed

if self.can_do_syntax():
			self.line_can_update = True
###


check copy paste overrides
check with defaults?
copy whole lines


split __init__.py to smaller files/modules



check use_geometry in win11, macos, not done



Add Settings section in help?, not done ######


cursor is in multiline string does not always work?
because strings tag are not updated correctly
check insert triples, then write in them couple lines
check_line print scope
maybe try:
	return override if triple in oldline: check scope



#####
decoration instead of linenumbers in ln_widget?
user editable
	o
   o
  o
 o
o
 o
  o
   o
    o
#####


#######################################################
#######################################################
save tag-cache for all py files
chk_sum: len(file), saved in conf

# 700ms  rpi1 no compressing,	no file writing
# 800ms  rpi1 no compressing,  yes file writing
# 1400ms rpi1 with compressing, no file writing
# 1400ms rpi1 with compressing and file writing
# --> file writing takes almost no time
# --> compressing takes some time when slow machine
# --> choosing not to use compression


tcl dictionary crash course
e.tk.eval('set mydict {}')
e.tk.eval('dict set mydict mykey "myvalue"')
e.tk.eval('dict get $mydict mykey')

{
	{
	fpath1  {
			{tag1 {idx1 idx2..} {tag2 {idx1 idx2..}..
			}
	}
	
	{
	fpath2  {
			{tag1 {idx1 idx2..} {tag2 {idx1 idx2..}..
			}
	}
	..
}

#######################################################
#######################################################



print('\nState:', self.state,
'\ntcl_name:', self.tcl_name_of_contents,
'\ncheck_scope:', self.tabs[e.tabindex].check_scope,
'\nline_can_update:', self.line_can_update)


Save-button behaviour should be changed to: always save curtab
	and if holding down ctrl --> save_forced


list tree of deflines


line is defline use defline tag?


if 'srings' in 
--> get tag_prevrange and update pos in while loop
continue




################################
################################
definition tag
for example: 'defline1'
number is indentation level

fix indent if async in update ins tokens, done
using flag

fix walk_scope, done
got_def, done

get_scope_path not done

defline when update?
indent/dedent?
tab_over_indent?

ctrl-(shift)-,. --> instead of ctrl-1234?



space --> exit goto_def





####
from this: if 'strings' in self.contents.tag_names(pos):
to this:
tags = self.contents.tag_names(pos)
if 'strings' in tags:
elif 'comments' in tags:
(and remove '#' from patts?)
####


check
get_scope_start: on fail return __main__()
			NOTE: One needs to check that after get_scope_start-call:
				if scope_path == '__main__()':
					do not call get_scope_end()







fix for multiline strings at __main__:
check_line:
if check_scope:
if __main__ : scope_start/end = get absolutely next deflines up down
no up --> 1.0 no down --> end
seems to work


Check lines with '@'



defline no number


tab_over_indent no py file



get_scope_start:
1170 ms with old method




################################


###
this below no work because can be 'wandering lines' between scopes
with same indentation than ind_lvl_down
--> could just use old re-aproach or
--> 
###


get_scope_start:
1:get_deflines()

if no def_line down:
- nearest def_line with indent0 up == parent0
- if no def_line in file --> scope is __main__

if nearest def_line down has indent0 or no def_line down:
	search scope in loop0
else:
	ind_lvl_down > 0
	search scope in loop1
	
	
example (loop1):
find nearest def_line down, (for example)has indent1 = ind_lvl_down

- find nearest def_line, with ind_lvl_down-1 (now indent0), up
--> parent(ind_lvl_down-1), now(parent0)

--> this will be the scope if there is no deeper parent found later


- then, get last def_line with ind_lvl_down (now indent1) between
	parent(ind_lvl_down-1) (now parent0) and cur_line
	--> parent(ind_lvl_down)
	if no such def_line --> scope is parent0
	else:--> this will be the scope if there is no deeper parent found later
	

maxind = 9
real start:
get nearest def_line (with maxind),
	between parent(ind_lvl_down) (now parent1) and curline:
1:	if none --> found scope, is parent(ind_lvl_down) (now parent1)
	
	###
	execpt must search for 'wandering lines' between parent1 and curline:
	This should be faster though than searching backwards (old method)
	if there is line with ind_lvl_down: --> scope is not ind_lvl_down(parent1)
	--> scope is with indentation <= ind_lvl_down
	We know there is defline, up from curline, with ind_lvl_down-1 (parent0)
	--> scope is parent0
		Q: how we know this?
		A: nearest def_line down had ind_lvl=1
		--> it (and curline) has to belong to parent0 up
	
	finally if there is now 'wandering lines':
	--> scope really was parent1
	###
	
1: continuing here	
	else: there is for example, def_line with (ind_lvl_down+2) (now indent3)
		== ind_lvl_def_line_ref_up
	
	- find next line up with ind_lvl_def_line_ref_up (now indent3):
		if that line is also def_line --> found scope
		else:
			if ind_lvl_def_line_ref_up = ind_lvl_down+1
			--> found scope, is parent(ind_lvl_down) (now parent1)
			
			goto: real start, with maxind == ind_lvl_def_line_ref_up-1
				get nearest def_line, between parent(ind_lvl_down) and
				that def_line with ind_lvl_def_line_ref_up (indent3),
				
				if none --> scope is parent(ind_lvl_down) (now parent1)
				
				
################################







get scope path:

	#this speeds up getting path, but need to get first defline 
	get first defline using old method
					
	get rest of path using new method:
		get tagprevrange(indent?)

################################
################################





get_tokens(self, tab, update=False):
		''' Get syntax-tokens for insert_tokens()

	fix this	-->	Called from: walk_tabs
			

detect slow machine, no?
self.set_flag_machine_is_slow(True)











apply_config():
tab.text_widget = tkinter.Te<insert>

then tab complete
-->
tab.text_widget = Text}


set_syntags() contents.tag_config combine?


self.anchorname --> tab.anchorname
	currently changed when walk_tabs, in close_tab


self.text_widget_basic_config


space: exit to defline, when gotodef? like in search


Frame skip bindlevel etc check, no check?


all ctrl-somekey --> alt-somekey
like ctrl-gf etc
ctrl-ae --> alt-ae


self.pad
			

stashing --> automatic, or at least importflag?


set_textwidget, return widget instead of side-effect?






################################################
# Thinking about how to get scope limits faster Begin

searching scopepath is slow with long scopes like Editor
and searching starts from near end

henxel.Editor.__bases__
type(self).__name__

[i for i in dir(henxel.Editor) if i not in dir(henxel.tkinter.Toplevel)]


1: get to indent 1 --> defline
2: m = re.search(defline, contents)
3: pos_def = m.start()

patt1 = r'(?:^async[[:blank:]]+def)|(?:^def[[:blank:]]+)|(?:^class[[:blank:]]+)'
patt2 = r'(?:^def\s+)|(?:^class\s+)|(?:^async\s+def)'

p = re.compile(patt2)

def re_search(defline, p, contents):
	t0 = int(e.root.tk.eval('clock milliseconds'))
	m = re.search(defline, contents)
	pos_def = m.start()
	last = 0
	new = 0
	for m in p.finditer(contents):
		new = m
		if new.start() > pos_def: break
		last = new
	else:
		if new: last = new
	if last:
		k = last.endpos-last.start()
		res = e.contents.index('end -%dc' % k )
		t1 = int(e.root.tk.eval('clock milliseconds'))
		print(res, t1-t0, 'ms')

	

# s=tab.contents, update it at search start
cont = e.tabs[e.tabindex].contents
patt = r'(?:^def\s+)|(?:^class\s+)|(?:^async\s+def)'
chars_to_end =offset= e.contents.count('insert linestart', 'end', 'chars' )[0]

def re_search(searchword, contents, offset):
	t0 = int(e.root.tk.eval('clock milliseconds'))
	m = re.search(searchword, contents[:-offset], flags=re.MULTILINE)
	k = m.endpos-m.start()
	res = e.contents.index('end -%dc' % k )
	t1 = int(e.root.tk.eval('clock milliseconds'))
	print(res, t1-t0, 'ms')

# Thinking about how to get scope limits faster End
################################################





ln_widget dark brown or gray





To help, notes: loadfile always opens file in current tab
	--> old file is saved and closed but bookmarks are gone
	--> when planning opening new file from disk,
		check is current tab something one wants to keep open, or does it have important
		bookmarks, if is, then open new tab first, and then open file to it.
	--> It is good practise to always: open newtab, open file
			

henxel.get_info()
list funcs which gets some info
check list add comments


show_err() run() combine similar parts?


quit_me docstring


idx_lineend() == display line end, this is ok?


copy block to empty line indent0 no work?


sel.first sel.last scope edit_search_setting ?


check syntax when no debug?


move many lines is very slow! almost dangerous ########


####
macos
clipboard not persist over restart if not paste to console
termios
tty
pty

get line from python console:
	readline.get_line_buffer()

insert line in console
	readline.insert_text('dir()')

display it
	readline.redisplay()
####
###########################################################


git diff -b --ignore-blank-lines
pip install build setuptools
python -m build -nx


tab complete at end of:
	self.tabs[self.tabindex]
insert .pos and tab -->
self.tabs[self.tabindex]nposition


	
docstring:
	intention
	called from


####
curline needs highligh #################
when:
	check_sel, button-1, gotos, tab_open, undo, stop_search


when update color:
	when self.bgcolor changes
	

set geometry remember last pos size
root with pos ? self,


choose font loadfile scrollbar widht same as editor
launch first, then insert text etc.


set waiting cursor in init?
Reordering test for slow machines
test with no conf


use same padx in every widget
ln_wid, cont --> relief flat ok?


need: select_lines(startline, endline) ############
maybe put in gotoline? if ',:-?' in linenum: 1,100 then select, show last etc
--> goodbye vim


font choose check
colors edit enable toggle bold ############


Mod1-Shift-(
	works

self.contents.bind( "<Control-Shift-(>",
	bad event (
	--> 89

not tested in linux windows


red = r'#c01c28'
self.winfo_rgb(red)
self.winfo_rgb('deep sky blue')
####



view changes, after open tab, restore_bookmarks() is used in:
	walk_tabs *
	del_tab *
		
	run *
	show_errors *
	stop_show_errors *
		
	help *
	stop_help *
		
	new_tab *
	tag_link *
	loadfile *
	save *
	


tokens
###########################
check_line:
self.check_scope	scope

Note:
When adding inside(after first char and before last char) tag-range,
added letters will get tagged automatically
and old tags keep their tags.


Note:
'strings' in e.contents.tag_names('insert')
will return true if cursor is at marked places or between them:

<INSERT>''' multiline string
multiline string
''<INSERT>'


when to check all_cont?
undo redo paste comment indent tabify_lines
indent unindent tokens scope?
# check update range in comment uncomment paste #########


search: when to set line_can_update? #################


######
self.par_err set in backspace_override and in insert/update tokens, when:
	self.checkpars() returns True
	should be also set when commenting line with pars, done in check_line ok?
######

backspace_override: no quote tests done ok? --> check_line


insert_tokens
	f-strings green?



###
debug: show errors in editor like when running scripts?
debug help?
when debug show info about being in debug-mode somewhere?
Q:how to test methods? A:manually
Q:how to not do overlapping tests, like normal and debug?
A: currently doing only debug-test because it pretty much includes normal
###


########################################
test-launch conf related thinking begin

when this: if not test.cnf: make_test_conf() ?
at start of test-launch? no?
at importtime if debug?



save_config(data_dict, path, )



made with: custom test_launch with:

test-launch no can save with normal CONFPATH #####

test-launch conf is in package?
get path of TEST_CONFPATH:
	if sys.prefix != sys.base_prefix:
		envpath = sys.prefix
	else:
		envpath = None
		raise ValueError
	
	filepath = pathlib.Path(envpath) / TEST_CONFPATH
	

loadfile(filepath):
		filepath is pathlib.Path
		If filepath is python-file, convert indentation to tabs.
		File is always opened to *current* tab
		

new_tab()
open other file
etc

custom: self.save_config()

test-launch conf related thinking end
######################################




################################################
TO NOTES START

####
A geometry string is a standard way of describing the size and location of a top-level window
on a desktop. A geometry string has this general form:
	'wxh±x±y' where:
	The w and h parts give the window width and height in pixels.
	They are separated by the character 'x'.

If the next part has the form +x,
it specifies that the left side of the window should be x pixels from the left side of the desktop.
If it has the form -x,
the right side of the window is x pixels from the right side of the desktop.

If the next part has the form +y,
it specifies that the top of the window should be y pixels below the top of the desktop.
If it has the form -y,
the bottom of the window will be y pixels above the bottom edge of the desktop.
####


####
contents.search searches logical lines, not display lines
--> no need to check for wrapped lines
####


####
File "<stdin>", line 12, in <module>
is last line of launch_test_as_string in build_launch_test()
####


#####
When:
	1: Some part of code is not tested(executed at launch-test)
	2: That part is changed
	3: Change has no syntax errors
	4: Change has runtime error:
		For example: wrong naming of object: "import functool" instead of "import functools"
	
Then: test-launch passes but after restart:
--> bad things can happen if code is part of __init__ for example
#####



######
__new__ is always executed when __init__ would be executed
######


######
quitme popup
	needs lambda if doing restart: subprocess.run
######


about indexes
###
top = self.getlineno("@0,0")
bot = self.getlineno("@0,65535")
if top == bot and text.winfo_height() == 1:
	# Geometry manager hasn't run yet
	height = int(text['height'])
	bot = top + height - 1
return top, bot
###


#####
It could be a multiline action, like replace_all
If trying to undo redo, redo will put cursor to action end,
undo to action start, if they dont fit in same screen, fail

Undo and indexes:
1: Redoing an action will put cursor to end of action, that got redoed,
just like when anything is normally being done
(example: after inserting letter, cursor is at end of letter)

2: Undoing an action will put cursor to start, where action, that got
undoed, would have started.
(example: after undoing insert letter,
cursor is at start of letter that no longer exist)
#####		


##
test-launch has own root
##



- test-launch: subprocess in subprocess does work!
	But at start of class Editor:
		No need App-name at launch-test, also this would deadlock the editor
		in last call to subprocess with osascript. Value of mac_term would be 'Python'
		when doing launch-test, that might be the reason.
	
	in quit_me:
	# Test-launch Editor (it is set to non visible, but flags can here be edited)
	###################################################################
	# Note that currently this callback(quit_me) is binded with old flags.
	# --> If one changes flags here, and does cmd-q, old flags are still used
	# in test-launch. But after next cmd-q, new flags are binded, and used.
	# In short:	If changing flags, and want to see the difference:
	# 			do cmd-q two times! (and maybe clear console after first one)
	###################################################################
	# https://stackoverflow.com/questions/3720740/pass-variable-on-import/39360070#39360070
	
	
- bookmarks check:
	view changes, after open tab, restore_bookmarks() is used in:
		walk_tabs *
		del_tab *
		
		run *
		show_errors *
		stop_show_errors *
		
		help *
		stop_help *
		
		new_tab *
		tag_link *
		loadfile *
		save *
		
		
TO NOTES END
########################
		
		





safe_index = get_safe_index(index)
elide-safe indexing check:
	Areas checked:
		Elide

A always, O almost always
	dont need safe-index as argument:
		get_safe_index()

		elide_scope(),		calls:	get_safe_index A

		line_is_defline(),	calls:	None
		line_is_empty(),	calls:	get_safe_index A
		idx_linestart(),	calls:	get_safe_index A,	line_is_empty O1, line_is_elided O1

		get_scope_start(),	calls:	get_safe_index A,	line_is_elided O1,
														line_is_defline O1,
														idx_linestart O1,
																			line_is_defline O2,
																			idx_linestart O2

		get_scope_end(),	calls:	get_safe_index A, line_is_elided A

		move_by_words()
		select_by_words()
		goto_linestart()
		goto_lineend()
		copy, fallback
		yank_line()
		move_many_lines(), select




		not checked:
			walk_scope
			select_scope
			etc


		move_by_words seems ok, but elided was not selected
			--> copy() was not ok:
			self.contents.selection_get() would not get elided text
			--> self.contents.get('sel.first', 'sel.last')

			same in yank_line()


#######################################################
# If cursor was at defline lineend, it was moved 1 char left,
# put it back to lineend
if self.contents.compare(idx, '!=', ref):
	#
	# 	Q: Why not '%s lineend' % idx ?
	#
	# 	A:	s = '%s lineend' % idx_scope_start
	#		self.contents.tag_add('elided', s, e)
	#
	# That says, the first index inside elided text is:
	# 	'lineend' of definition line
	#
	# --> if cursor is put there, at 'lineend', it will be elided.
	# --> in a way it is correct to say that definition line has now no end.
	#		(the index is there but not visible)
	#
	# But lines always have 'display lineend', And putting cursor
	# there works.
	#
	# Q2: Were is cursor exactly if put there?
	# A2: with some repetition
	#	s = '%s lineend' % idx_scope_start
	#	e = idx_scope_end
	#
	#	self.contents.tag_add('elided', s, e)
	#
	# One has to think what is the first display index after elided
	# text. That is first index after 'e' and since one knows that
	# 'idx_scope_end' is 'lineend' of the last line of scope
	#
	# --> cursor is there, since text-ranges excludes out ending index if
	# one remembers right, cursor is exactly at 'idx_scope_end'

	self.contents.mark_set('insert', '%s display lineend' % idx)

	#
	# Or more general, if elided part would end in the middle of line,
	# then, current line would be extended with rest of that remaining line.
	# Then if doing 'display lineend', cursor would just go to end of that line.
	#
	##################################################################



	needs safe-index as argument:
		line_is_elided(safe_index)




def myfunctionDef() ...


chevron
1fb94
1fbca

u+2026
…

u+203a
›

u+2335
⌵


check win linux:
	self.contents.bind( "<Alt-Key-BackSpace>", self.del_to_dot)
	Alt-shift-F
	etc?

Cmd-shift-F
select cur scope only


Control-89
Cmd-89
	walk_scope() (rising tendency)
	8 goto next(up) defline
	9 goto prev(down) defline


Control-Shift-()
Cmd-Shift-()
	walk_scope() (diving tendency)
 	( goto absolutely next(up) defline
	) goto absolutely prev(down) defline




async def only


@f1
@f2
def funcname[str]():    not done #########################


get_scope_end() get_scope_start() get_scope_path()
################################################################################################


update help
uncomment '##' must be at indent0 or it can not be removed --> help?
Control-d not Control-c to quit multiline command --> help


sel many lines:
linenum yview_scroll etc:  center_view()


handle_normal_entry


save file to disk when pressing save


python not remommended install with brew?
pyenv

get(elided) -displaychars
elided text is getted by default
structure-viewer with taglinks?
#####################################################
replaced less yellow

system_colorname = self.entry.cget('fg')
colors_as_rgb_tuple = self.winfo_rgb(system_colorname)
for example, white color would get: (65535, 65535, 65535)

red = r'#c01c28'
self.winfo_rgb(red)
self.winfo_rgb('deep sky blue')
#################################







github:
fixed tag config -under --> -underline
tkcon.tcl
make README etc.






#######################################
# Below this, not essential but wanted
#######################################

automate exit editor, reopen python and editor
done only for macos


#############
show scope always
handle_search_entry not done in search_next
update scope path after:
	walk_tab etc
	in fname.py @Class.method()

unbind load() Return?
focusin focusout show full path?
#############


macos:
if toggled terminal to fullscreen, after doing one dir(),
then switch to non fullscreen editor, editor is freezed.
pressing return in terminal and then switching back to editor
unfreezes editor.
If both are fullscreen, there is no freezing.
This is little similar to win11-behaviour when not using idle-shell


macos: sometimes closing in fullscreen no get focus back terminal


fdialog.py
	filter:
	sorted(pathlib.Path().glob("*AD*"))
	sorted(pathlib.Path().glob("normal filename"))
	two entries for setting filter at bottom,
	one for dirs, one for files: *.* as default


when creating for example new function newname(),
how to ensure newname has not already been reserved?


when paste multiline, if cursor is at idx_linestart of non empty line, and copied text
lastline is indentation only, indentation shape of following lines should be preserved when paste

when paste multiline, then undo that, then paste again same thing, then again undo:
	there can be something leftovers from paste?


check is it necessary to check event.state in select_by_words etc


show cursor when disabled state, no?


bitmap check ensure width?


no state cheks in mac_cmd move_many_lines?


goto bookmark show position among all bookmarks etc.
goto bookmark, show bookmark on top not bottom?


cmd-ae linestartend in python shell in macos?


ensure in venv?


animate walk_tab, save etc?


save(): escape generate is necessary?
save is too big


todo: tagging system like in youversion


type(self).__name__


macos:
ctrl-d --> ctrl-q/cmd-w ?


fix macos topbar menus?


undo pause, check what is difference when in callback:
	only one edit_separator
	two edit_separators



self.contents.bind( "<<TkWorldChanged>>", self.test_bind)
	then: self.menufont.configure(underline=1)
	works on macos


search/next also in errors, help####################


toggle indent with tabs --> space?


bind with eval from dict --> user editable binds


tuple after_cancel: (from_who, after_object_id) ?


check before copy, paste:
	is selection from editor?
	check indentation if not?


tab-comp in entry?


if selecting many lines down then many lines back up, or vice versa:
	no see selection


guides ?
	on mouseover guideline: show startline of block


toggle clipboard (10 newest items) dropdown in git_btn
	on click put to first?


#################
fix search etc: after giving search word, quickly pressing return and esc
state is locked to search


FIXED with checking if state is waiting in stop_search

check other escapable callbacks?
#################


padx font measure
cont, ln_wid

padx = self.tab_width // self.ind_depth // 3
pady = padx
in init apply conf and update fonts

############################################
# Not essential End
############################################
# Below this, notes


unbind /give info about cmd shift A? man page
https://intellij-support.jetbrains.com/hc/en-us/articles/360005137400-Cmd-Shift-A-hotkey-opens-Terminal-with-apropos-search-instead-of-the-Find-Action-dialog

1. Open Apple menu | System Settings | Keyboard | Keyboard Shortcuts | Services
2. Under section: Text
3. Uncheck Search man Page Index in Terminal (or change the shortcut)


######################
list of tk::mac procs
https://www.tcl.tk/man/tcl9.0/TkCmd/tk_mac.html

::tk::mac::OpenApplication
If a proc of this name is defined, this proc fill fire when your application is initially opened. It is the default Apple Event handler for kAEOpenApplication, “oapp”.

::tk::mac::ReopenApplication
If a proc of this name is defined it is the default Apple Event handler for kAEReopenApplication, “rapp”, the Apple Event sent when your application is opened when it is already running (e.g. by clicking its icon in the Dock). Here is a sample that raises a minimized window when the Dock icon is clicked:

proc ::tk::mac::ReopenApplication {} {
	if {[wm state .] eq "withdrawn"} {
		wm state . normal
	} else {
		wm deiconify .
	}
	raise .
}
#######################
























entry.winfo_atom('bg')
81
e.entry.winfo_atom('fg')
82
e.entry.winfo_atomname(81)
'bg'
e.entry.winfo_atomname(82)
'fg'




Manual selection handling in Text-widget:
self.contents.mark_names()
'insert', 'current', 'tk::anchor1'
self.contents.index('tk::anchor1')
'38.5'
self.contents.mark_set('tk::anchor1', '38.6')
then set SEL_FIRST to same index if selection starts from top
else: SEL_LAST




win
plain a	==8
+ ctrl	==12
+ shift	==9
+ both	==13

win10 left
262144
win11 left
262152
win11 Home/End
262152

guessing this not tested:
win10 Home/End
262144



linux and macos
plain a	==0
+ ctrl	==4
+ shift	==1
+ both	==5


mac_os extra keys:
fn Super	bind to key and check state == 64
Cmd Meta  	bind to key and check state == 8
Alt			bind to key and check state == 16
Mod1 == Cmd

# Binding to combinations which has Command-key (apple-key)
# (or Meta-key as reported by events.py)
# must use Mod1-Key as modifier name:
# Mod1-Key-n == Command-Key-n

cmd		-h 	hide
alt-cmd -h 	hide others
fn 		-h 	show desktop?

ctrl -up 	toggle show open apps
ctrl -down hide others temporarily, get them back with ctrl-up
ctrl -leftright  switch apps?


all alt shortcuts makes some special char
have to bind to symbol name to get alt-shorcuts work in macOS
self.contents.bind( "<function>", self.mac_cmd_overrides)



::tk::mac::OnHide
If defined, this is called when your application receives a kEventAppHidden event, e.g. via the hide menu item in the application or Dock menus.


::tk::mac::OnShow
If defined, this is called when your application receives a kEventAppShown event, e.g. via the show all menu item in the application menu, or by clicking the Dock icon of a hidden application.



# yet another way to find os_type
print tcl-array nicely
e.tk.eval('parray tcl_platform')

print using pattern
e.tk.eval('parray tcl_platform os')





self.bind("<<ThemeChanged>>", self.handle_configure)

# if macos: thread, tkinter.Tk(), button, string


system_colorname = self.entry.cget('fg')
colors_as_rgb_tuple = self.winfo_rgb(system_colorname)
for example, white color would get: (65535, 65535, 65535)


night colors mac_os:
btn_git
filedialog
entry
made quick fix





###################################
ctrl-r no work in python console
https://bugs.python.org/issue38995

Most likely what is happening is that the two Python instances you are using are linked to different versions of the external readline library.  From the version information, its clear that you are using the Python 3.8.0 from the python.org macOS installer.  That Python uses the macOS-supplied BSD editline (AKA libedit) for readline functionality.  The Python 3.7.3 you have is not from python.org and based on the prompt it looks like it was linked with a version of GNU readline which probably does bind ^R to the reverse search function by default.  As described in the Python Library Reference page for readline (https://docs.python.org/3/library/readline.html), both GNU readline and BSD editline can be tailored via configuration files; GNU readline uses ~/.inputrc while BSD editline uses ~/.editrc.

On macOS, the available configuration commands for editline are described in the man page for editrc:

man 5 editrc

In particular, you should be able to enable editlines reverse search functionality by adding the following line to ~/.editrc:

bind ^R em-inc-search-prev

where ^R is two characters, not the single character CTRL-R.
###########################




mac_os:
When in fullscreen, other toplevels go to their own tab.
If fullscreen when fontchoose might press wrong close button.

if menufont is 14 buttons are mac buttons
if bigger they are basic buttons


# self.tk.eval('wm attributes .!editor -fullscreen 1')

# get tcl name of widget
str(e.nametowidget(e.entry))
e.contents.winfo_name()

label .lbl

e.tk.eval('.!editor.!entry config -bg')

e.tk.eval('proc myproc {args} {puts AAA}')
e.tk.eval('set myvar A')
e.tk.eval('trace add variable myvar write myproc')



e.tk.eval('proc myproc {args} {puts AAA}')
e.tk.eval('trace add execution .!editor.!entry enter myproc')



e.tk.eval('set myvar B')





win11 ctrl-right no work
e.info_patchlevel()
_VersionInfoType(major=8, minor=6, micro=12, releaselevel='final', serial=0)

array values:
e.tk.eval('foreach key [array names ::tcl::WordBreakRE] {puts $::tcl::WordBreakRE($key)}' )
\s*(\S+)\s*$
\S\s|\s\S
\S*\s+\S
\s*\S+\s
^.*(\S\s|\s\S)

array keys:
e.tk.eval('foreach key [array names ::tcl::WordBreakRE] {puts $key}' )
previous
after
next
end
before


#################
To fix: replace array ::tcl::WordBreakRE contents with newer version, and
replace proc tk::TextNextWord with newer version which was looked in Debian 12 below.
Needs to generate ctrl-leftright before this eval works?:

e.contents.event_generate('<<NextWord>>')
e.tk.eval('set l3 [list previous {\W*(\w+)\W*$} after {\w\W|\W\w} next {\w*\W+\w} end {\W*\w+\W} before {^.*(\w\W|\W\w)}]; puts $l3 ')
e.tk.eval('array set ::tcl::WordBreakRE $l3 ')
e.tk.eval('proc tk::TextNextWord {w start} {TextNextPos $w $start tcl_endOfWord} ')

#################



# Debian 12, ctrl-right works
e.info_patchlevel()
_VersionInfoType(major=8, minor=6, micro=13, releaselevel='final', serial=0)

array values:
e.tk.eval('foreach index [array names ::tcl::WordBreakRE] {puts $::tcl::WordBreakRE($index)}')
\W*(\w+)\W*$
\w\W|\W\w
\w*\W+\w
\W*\w+\W
^.*(\w\W|\W\w)



# this is todo, and stub-editor for testing, might not work

# Run in python console
# >>> import todo
# >>> e=todo.Ed()


# Binding rewrite planning Begin

# print current bindings for a class
# e.contents.bind_class('Text')


# Unbinding default binding of Text-widget:
# e.contents.unbind_class('Text', '<Button-1>')

# So check what want to bind in self.contents, and unbind them from Text
# and it should then work: binding straight to self. Also can unbind all other unneeded bindings.


# remap keys?
# unbind always?

# self.is_binded_to_do_nothing = d = dict()
# d['copy'] = False

# self.is_binded_to_skip_bindlevel = d = dict()
# d['show next'] = True

# self.is_binded_to_normal = d = dict()
# d['show next'] = False


# self.bind_seqs = d = dict()
# seq = d['decrease scrollbar width'] = "<Control-minus>"
# bind_id = self.bind( seq, self.decrease_scrollbar_width)

# self.bind_ids = q = dict()
# q[seq] = bind_id


# when unbinding:
# seq = d['decrease scrollbar width']
# id = q[seq]
# self.contents.unbind(seq, funcid=id)
# q.pop(seq)

# Binding rewrite planning End

# /dev/idle/colorizer.py
# import builtins
# help(builtins)


# remove printings before build




# get line from python console:
# readline.get_line_buffer()

# insert line in console
#readline.insert_text('dir()')

# display it
#readline.redisplay()


#############
''' asd
	import tkinter
	import tkinter.font

'''

import tkinter
import tkinter.font






########################## Maybe interesting Begin:

# Handling of states and bindings is hard. One really should read a book about
# stateful programming or something similar if doing something more serious.


# Howto: cancel (not unbind) certain binding for time being:

# def cancelbind(self, event=None):
#	return 'break'

# self.keyid = self.mywidget.bind( "<Some-Key>", func=self.cancelbind)


# Howto: skip bindlevel for certain binding for time being:

# def skip_bindlevel(self, event=None):
#	return 'continue'

# self.keyid = self.mywidget.bind( "<Some-Key>", func=self.skip_bindlevel)


# Howto: lambda to nothing:
# self.contents.bind( "<Left>", lambda event: ...)


# Howto: unbind in tkinter:

# def mycallback1(self, event=None):
#	print(1, event.keysum, event.num)

# def mycallback2(self, event=None):
#	print(2, event.keysum, event.num)

# self.anykeyid = self.mywidget1.bind( "<Any-Key>", func=self.mycallback1)
# self.anybutid = self.mywidget1.bind( "<Any-Button>", func=self.mycallback2)

# self.contents.unbind("<Any-Key>", funcid=self.anykeyid)
# self.contents.unbind("<Any-Button>", funcid=self.anybutid)



############# About screen dimensions Begin

# This is correct:
# .winfo_screenheight()
# .winfo_screenwidth()

# check screen dpi:
#
# import tkinter
# import tkinter.font
# root = tkinter.Tk()
# t = tkinter.Text(root)
# t.pack()
# f = tkinter.font.Font(t, family='TkDefaulFont', size=12)
# dpi = f.metrics().get('linespace')*5

############### About screen dimensions End


# builtin stiples have too small and dense dots for hdpi:
# myTextwidget.tag_config('sel', bgstipple='gray12')

########################## Maybe interesting end


class Ed(tkinter.Toplevel):

	# use 10000 (10s) if need slow update interval for linenumbers
	UPDATE_PERIOD = 100 #ms

	updateId = None

	# This list is needed for classmethod updateAllLineNumbers() to work.
	# Self must be then added to this list in init with:
	# self.__class__.editors.append(self)
	editors = []

	def __init__(self):

		self.root = tkinter.Tk().withdraw()
		super().__init__(self.root)
		self.__class__.editors.append(self)

		self.lineNumbers = ''

		self.rowconfigure(1, weight=1)
		self.columnconfigure(1, weight=1)

		self.btn_test=tkinter.Button(self, text='Test')
		self.btn_test.grid(row=0, column = 0, sticky='w')

		self.entry = tkinter.Entry(self)
		self.entry.grid(row=0, column = 1, sticky='we')

		self.btn_open=tkinter.Button(self, text='Open')
		self.btn_save=tkinter.Button(self, text='Save')
		self.btn_open.grid(row=0, column = 2)
		self.btn_save.grid(row=0, column = 3, sticky='e')


		self.lb = tkinter.Text(self, width=5, padx=10)
		self.lb.grid(row=1, column = 0, sticky='nsw')

		self.contents = tkinter.Text(self, blockcursor=True, undo=True, maxundo=-1, autoseparators=True, tabstyle='wordprocessor')

		self.scrollbar = tkinter.Scrollbar(self, orient=tkinter.VERTICAL)


		self.contents.grid(row=1, column=1, columnspan=3, sticky='nswe')
		self.scrollbar.grid(row=1,column=3, sticky='nse')

		self.font = tkinter.font.Font(size=12)
		self.font.config(family='Noto Mono', size=12)

		self.lb.tag_config('justright', justify=tkinter.RIGHT)

		self.scrollbar_width = 30
		self.elementborderwidth = 4

		self.scrollbar.config(width=self.scrollbar_width)
		self.scrollbar.config(elementborderwidth=self.elementborderwidth)

		self.contents.config(font=self.font)
		self.entry.config(font=self.font)
		self.btn_open.config(font=self.font)
		self.btn_save.config(font=self.font)
		self.btn_test.config(font=self.font)
		self.lb.config(font=self.font, state='disabled')

		# Changing the settings to make the scrolling work

		self.scrollbar['command'] = self.contents.yview
		self.contents['yscrollcommand'] = self.scrollbar.set

		noOfLines = 500
		s = 'line ................................... %s'
		s = '\n'.join( s%i for i in range(1, noOfLines+1) )

		self.contents.insert(tkinter.END, s)

		# Needed in updateLineNumbers(), there is more info.
		# y_extra_offset is 3 but why, dont know:

		self.update_idletasks()
		_, self.y_extra_offset, _,  self.bbox_height = self.contents.bbox('1.0')


##		self.contents.bind('<<Modified>>', self.modified)

		self.contents.edit_reset()
		self.contents.edit_modified(0)
		self.eventnum = 0

		if self.__class__.updateId is None:
			self.updateAllLineNumbers()


	def modified(self, event=None):

		self.eventnum += 1

		print(f'Begin Event {self.eventnum}:\n')

		#l = [ item for item in dir(event) if '_' not in item ]

		print(event.__class__)
		print(event)
		print('asd', event.__repr__() )

		#for key in l:
		#	print(key, getattr(event, key))


		print(f'\nEnd Event {self.eventnum}:')
		print(10*'= ')

		self.contents.edit_modified(0)


	def getLineNumbers(self):

		x = 0
		line = '0'
		col= ''
		ln = ''

		# line-height is used as step, it depends on font:
		step = self.bbox_height

		nl = '\n'
		lineMask = '    %s\n'

		# @x,y is tkinter text-index:
		# The character that covers the (x,y) -coordinate within the text's window.
		indexMask = '@0,%d'

		for i in range(0, self.contents.winfo_height(), step):

			ll, cc = self.contents.index( indexMask % i).split('.')

			if line == ll:
				if col != cc:
					col = cc
					ln += nl
			else:
				line, col = ll, cc
				# -5: show up to four smallest number (0-9999)
				# then starts again from 0 (when actually 10000)
				ln += (lineMask % line)[-5:]

		return ln


	def updateLineNumbers(self):

		tt = self.lb
		ln = self.getLineNumbers()
		if self.lineNumbers != ln:
			self.lineNumbers = ln

			# 1 - 3 : adjust linenumber-lines with text-lines

			# 1: Actual line.col of x=0 y=0 in text-widget:
			# idx is index of currently visible first character
			idx = self.contents.index('@0,0')

			# 2: bbox returns this kind of tuple: (3, -9, 19, 38)
			# (bbox is cell that holds a character)
			# (x-offset, y-offset, width, height) in pixels
			# Want y-offset of first visible line, and reverse it.
			# Also update line-height (bbox_height) in case of font changes:

			_, y_offset, _, self.bbox_height = self.contents.bbox(idx)

			y_offset *= -1

			if y_offset != 0:
				y_offset += self.y_extra_offset

			tt.config(state='normal')
			tt.delete('1.0', tkinter.END)
			tt.insert('1.0', self.lineNumbers)
			tt.tag_add('justright', '1.0', tkinter.END)

			# 3: Then scroll lineswidget same amount to fix offset
			# compared to text-widget:
			tt.yview_scroll(y_offset, 'pixels')

			tt.config(state='disabled')


	@classmethod
	def updateAllLineNumbers(cls):

		if len(cls.editors) < 1:
			cls.updateId = None
			return

		for ed in cls.editors:
			ed.updateLineNumbers()

		cls.updateId = ed.contents.after(
			cls.UPDATE_PERIOD,
			cls.updateAllLineNumbers)

		# about double cpu compared to after(100ms), but is smoother
##		cls.updateId = ed.contents.after_idle(
##			cls.updateAllLineNumbers)



